fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    protecting BOOL .
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N M : Nat .
    ceq [ N ] = [ sd(N, k) ] if N >= k .

    op _<_ : Nat/{k} Nat/{k} -> Bool .

    ceq [N] < [M] = [sd(N, k)] < [M] if N >= k .
    ceq [N] < [M] = [N] < [sd(M, k)] if M >= k .
    ceq [N] < [M] = true if (N < M) and (N < k) and (M < k) .
    ceq [N] < [M] = false if (N > M) and (N < k) and (M < k) .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
    pr NAT/{P} .

    sort Status Philosopher Chopstick Configuration .
    subsorts Philosopher Chopstick < Configuration .

    ops thinking hungry eating : -> Status [ctor] .

    op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
    op chopstick : Nat/{P} -> Chopstick [ctor] .

    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

    vars N N1 M C : Nat .

    op init_ : Nat -> Configuration .
    eq init 0 = none .
    eq init s N = chopstick([ N ]) philosopher([ N ], thinking, 0) init N .

    op initState : -> Configuration [ctor] .
    eq initState = init k .

    var NP : Nat/{P} .

    rl [get-hungry] : philosopher([ N ], thinking, 0) => philosopher([ N ], hungry, 0) .

    crl [grab-stick-first] : philosopher([ N ], hungry, 0) chopstick([ M ]) => philosopher([ N ], hungry, 1)
        if ([ N ] == [ M ] and [ N ] < [ s N ]) or ([ s N ] == [ M ] and [ s N ] < [ N ]) .

    crl [grab-stick-second] : philosopher([ N ], hungry, 1) chopstick([ M ]) => philosopher([ N ], hungry, 2)
        if ([ s N ] == [ M ] and [ N ] < [ s N ]) or ([ N ] == [ M ] and [ s N ] < [ N ]) .

    rl [eat] : philosopher([ N ], hungry, 2) => philosopher([ N ], eating, 2) .
    rl [think] : philosopher([ N ], eating, 2) => philosopher([ N ], thinking, 0) chopstick([ N ]) chopstick([ s N ]) .

endm

view 5 from NAT* to INT is
    op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
    pr DINING-PHILOSOPHERS{5} .
endm

