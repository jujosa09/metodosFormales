fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N : Nat .
    ceq [ N ] = [ sd(N, k) ] if N >= k .
endfm

mod DINING-PHILOSOPHERS-WAITER{P :: NAT*} is
    pr NAT/{P} .

    sort Status Philosopher Chopstick Configuration Queue Waiter .
    subsorts Philosopher Chopstick Waiter < Configuration .
    subsort Nat/{P} < Queue .

    ops thinking hungry eating : -> Status [ctor] .

    op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
    op chopstick : Nat/{P} -> Chopstick [ctor] .

    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

    op empty : -> Queue [ctor] .
    op __ : Queue Queue -> Queue [ctor assoc id: empty] .

    op waiter : Queue -> Waiter [ctor] .

    vars N M C : Nat .

    op init_ : Nat -> Configuration .
    eq init 0 = none .
    eq init s N = chopstick([ N ]) philosopher([ N ], thinking, 0) init N .

    op initState : -> Configuration [ctor] .
    eq initState = waiter(empty) init k .

    var NP : Nat/{P} .
    var Q : Queue .

    rl [get-hungry] : philosopher([ N ], thinking, 0) waiter(Q) => philosopher([N], hungry, 0) waiter(Q [ N ]) .
    crl [grab-stick] : chopstick([ N ]) chopstick([ M ]) philosopher([ N ], hungry, 0) waiter([ N ] Q) => philosopher([ N ], eating, 2) waiter(Q) 
        if ([s N] == [ M ]) .
    rl [eat] : philosopher(NP, hungry, s s 0) => philosopher(NP, eating, s s 0) .
    rl [think] : philosopher([ N ], eating, s s 0) => chopstick([ N ]) philosopher([ N ], thinking, 0) chopstick([ s N ]) .

endm

view 5 from NAT* to INT is
    op k to term 5 .
endv

mod DINING-PHILOSOPHERS-WAITER-5 is
    pr DINING-PHILOSOPHERS-WAITER{5} .
endm

